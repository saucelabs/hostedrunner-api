// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// ContainerSpec Test-runner container specification.
type ContainerSpec struct {
	Auth *struct {
		Token *string `json:"token,omitempty"`
		User  string  `json:"user"`
	} `json:"auth,omitempty"`
	Name string `json:"name"`
}

// EnvVar Environment variable.
type EnvVar struct {
	// Name Environment variable name.
	Name string `json:"name"`

	// Value Environment variable value.
	Value string `json:"value"`
}

// Error Generic error
type Error struct {
	// Code Error code.
	Code string `json:"code"`

	// Message Error message.
	Message string `json:"message"`
}

// File Test Runner internal file.
type File struct {
	// Data Base64-encoded configuration file.
	Data string `json:"data"`

	// Path Test Runner configuration file mount path inside a container.
	Path string `json:"path"`
}

// Runner Test-runner details.
type Runner struct {
	// CreationTime Test-runner creation time.
	CreationTime int64 `json:"creation_time"`

	// Id Runner ID.
	Id string `json:"id"`

	// Image the image
	Image string `json:"image"`

	// Status Test-runner state.
	Status string `json:"status"`

	// TerminationReason a code describing why the test terminated
	TerminationReason *string `json:"termination_reason,omitempty"`

	// TerminationTime Test-runner execution termination time.
	TerminationTime *int64 `json:"termination_time,omitempty"`
}

// RunnerDetails defines model for RunnerDetails.
type RunnerDetails struct {
	// CreationTime Test-runner creation time.
	CreationTime int64 `json:"creation_time"`

	// Id Runner ID.
	Id string `json:"id"`

	// Image the image
	Image string `json:"image"`

	// Metadata Test-runner metadata, arbitrary key-value pairs.
	Metadata *RunnerMetadata `json:"metadata,omitempty"`

	// Status Test-runner state.
	Status string `json:"status"`

	// TerminationReason a code describing why the test terminated
	TerminationReason *string `json:"termination_reason,omitempty"`

	// TerminationTime Test-runner execution termination time.
	TerminationTime *int64 `json:"termination_time,omitempty"`
}

// RunnerList defines model for RunnerList.
type RunnerList struct {
	// Content A List of test-runners.
	Content []Runner `json:"content"`
}

// RunnerMetadata Test-runner metadata, arbitrary key-value pairs.
type RunnerMetadata map[string]interface{}

// RunnerSpec Test-runner specification.
type RunnerSpec struct {
	// Artifacts Test output files.
	Artifacts *[]string `json:"artifacts,omitempty"`

	// Container Test-runner container specification.
	Container ContainerSpec `json:"container"`

	// Entrypoint Command used to run tests.
	Entrypoint *string `json:"entrypoint,omitempty"`

	// Env List of environment variables.
	Env *[]EnvVar `json:"env,omitempty"`

	// Files Test Runner container-mounted files.
	Files *[]File `json:"files,omitempty"`

	// Metadata Test-runner metadata, arbitrary key-value pairs.
	Metadata *RunnerMetadata `json:"metadata,omitempty"`
}

// GetHostedImageRunnersParams defines parameters for GetHostedImageRunners.
type GetHostedImageRunnersParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostHostedImageRunnersJSONRequestBody defines body for PostHostedImageRunners for application/json ContentType.
type PostHostedImageRunnersJSONRequestBody = RunnerSpec

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// HostedAPIClient which conforms to the OpenAPI3 specification for this service.
type HostedAPIClient struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*HostedAPIClient) error

// Creates a new HostedAPIClient, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*HostedAPIClient, error) {
	// create a client with sane default values
	client := HostedAPIClient{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *HostedAPIClient) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *HostedAPIClient) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetHostedImageRunners request
	GetHostedImageRunners(ctx context.Context, params *GetHostedImageRunnersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostHostedImageRunners request with any body
	PostHostedImageRunnersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostHostedImageRunners(ctx context.Context, body PostHostedImageRunnersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHostedImageRunnersId request
	DeleteHostedImageRunnersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHostedImageRunnersId request
	GetHostedImageRunnersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *HostedAPIClient) GetHostedImageRunners(ctx context.Context, params *GetHostedImageRunnersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHostedImageRunnersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *HostedAPIClient) PostHostedImageRunnersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostHostedImageRunnersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *HostedAPIClient) PostHostedImageRunners(ctx context.Context, body PostHostedImageRunnersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostHostedImageRunnersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *HostedAPIClient) DeleteHostedImageRunnersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHostedImageRunnersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *HostedAPIClient) GetHostedImageRunnersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHostedImageRunnersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetHostedImageRunnersRequest generates requests for GetHostedImageRunners
func NewGetHostedImageRunnersRequest(server string, params *GetHostedImageRunnersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hosted/image/runners")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostHostedImageRunnersRequest calls the generic PostHostedImageRunners builder with application/json body
func NewPostHostedImageRunnersRequest(server string, body PostHostedImageRunnersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostHostedImageRunnersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostHostedImageRunnersRequestWithBody generates requests for PostHostedImageRunners with any type of body
func NewPostHostedImageRunnersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hosted/image/runners")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteHostedImageRunnersIdRequest generates requests for DeleteHostedImageRunnersId
func NewDeleteHostedImageRunnersIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hosted/image/runners/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHostedImageRunnersIdRequest generates requests for GetHostedImageRunnersId
func NewGetHostedImageRunnersIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hosted/image/runners/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *HostedAPIClient) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *HostedAPIClient) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetHostedImageRunners request
	GetHostedImageRunnersWithResponse(ctx context.Context, params *GetHostedImageRunnersParams, reqEditors ...RequestEditorFn) (*GetHostedImageRunnersResponse, error)

	// PostHostedImageRunners request with any body
	PostHostedImageRunnersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostHostedImageRunnersResponse, error)

	PostHostedImageRunnersWithResponse(ctx context.Context, body PostHostedImageRunnersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostHostedImageRunnersResponse, error)

	// DeleteHostedImageRunnersId request
	DeleteHostedImageRunnersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteHostedImageRunnersIdResponse, error)

	// GetHostedImageRunnersId request
	GetHostedImageRunnersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetHostedImageRunnersIdResponse, error)
}

type GetHostedImageRunnersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RunnerList
}

// Status returns HTTPResponse.Status
func (r GetHostedImageRunnersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHostedImageRunnersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostHostedImageRunnersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Runner
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r PostHostedImageRunnersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostHostedImageRunnersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHostedImageRunnersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteHostedImageRunnersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHostedImageRunnersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHostedImageRunnersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RunnerDetails
}

// Status returns HTTPResponse.Status
func (r GetHostedImageRunnersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHostedImageRunnersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetHostedImageRunnersWithResponse request returning *GetHostedImageRunnersResponse
func (c *ClientWithResponses) GetHostedImageRunnersWithResponse(ctx context.Context, params *GetHostedImageRunnersParams, reqEditors ...RequestEditorFn) (*GetHostedImageRunnersResponse, error) {
	rsp, err := c.GetHostedImageRunners(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHostedImageRunnersResponse(rsp)
}

// PostHostedImageRunnersWithBodyWithResponse request with arbitrary body returning *PostHostedImageRunnersResponse
func (c *ClientWithResponses) PostHostedImageRunnersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostHostedImageRunnersResponse, error) {
	rsp, err := c.PostHostedImageRunnersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostHostedImageRunnersResponse(rsp)
}

func (c *ClientWithResponses) PostHostedImageRunnersWithResponse(ctx context.Context, body PostHostedImageRunnersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostHostedImageRunnersResponse, error) {
	rsp, err := c.PostHostedImageRunners(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostHostedImageRunnersResponse(rsp)
}

// DeleteHostedImageRunnersIdWithResponse request returning *DeleteHostedImageRunnersIdResponse
func (c *ClientWithResponses) DeleteHostedImageRunnersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteHostedImageRunnersIdResponse, error) {
	rsp, err := c.DeleteHostedImageRunnersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHostedImageRunnersIdResponse(rsp)
}

// GetHostedImageRunnersIdWithResponse request returning *GetHostedImageRunnersIdResponse
func (c *ClientWithResponses) GetHostedImageRunnersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetHostedImageRunnersIdResponse, error) {
	rsp, err := c.GetHostedImageRunnersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHostedImageRunnersIdResponse(rsp)
}

// ParseGetHostedImageRunnersResponse parses an HTTP response from a GetHostedImageRunnersWithResponse call
func ParseGetHostedImageRunnersResponse(rsp *http.Response) (*GetHostedImageRunnersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHostedImageRunnersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RunnerList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePostHostedImageRunnersResponse parses an HTTP response from a PostHostedImageRunnersWithResponse call
func ParsePostHostedImageRunnersResponse(rsp *http.Response) (*PostHostedImageRunnersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostHostedImageRunnersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Runner
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteHostedImageRunnersIdResponse parses an HTTP response from a DeleteHostedImageRunnersIdWithResponse call
func ParseDeleteHostedImageRunnersIdResponse(rsp *http.Response) (*DeleteHostedImageRunnersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHostedImageRunnersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetHostedImageRunnersIdResponse parses an HTTP response from a GetHostedImageRunnersIdWithResponse call
func ParseGetHostedImageRunnersIdResponse(rsp *http.Response) (*GetHostedImageRunnersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHostedImageRunnersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RunnerDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
